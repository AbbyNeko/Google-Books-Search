{"version":3,"sources":["utils/API.js","pages/BookResult.js","pages/SearchBooks.js","pages/SavedBooks.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","keywords","id","delete","bookData","post","BookResults","className","href","image","alt","title","link","author","description","onClick","API","synopsis","then","res","console","log","catch","err","saveBook","SearchBooks","useState","bookResults","setResults","searchKeyword","useRef","handleFormSubmit","keyword","current","value","onSubmit","type","placeholder","ref","map","result","BookResult","SavedBooks","books","setBooks","loadBooks","data","useEffect","savedBooksList","book","class","_id","Nav","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8e10319b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  // Gets all books\n  getBooks: function() {\n    return axios.get(\"/api/books/\");\n  },\n  searchBooks: function(keywords) {\n    return axios.get(\"/api/searchBooks/\"+keywords);\n  },\n  // Deletes the book with the given id\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};\n","import React from \"react\"\nimport API from \"../utils/API\";\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function saveBook(bookData) {\n    if (bookData.title && bookData.author) {\n      API.saveBook({\n        title: bookData.title,\n        author: bookData.author,\n        synopsis: bookData.description\n      })\n        .then(res => console.log('saved'))\n        .catch(err => console.log(err));\n    }\n  };\n\nfunction BookResults({bookData}) {\n\n    return (\n            <div className=\"result\">\n                <img href={bookData.image} alt={bookData.title}/>\n                <h1><a href={bookData.link}>{bookData.title}</a></h1>\n                <h3>Author: {bookData.author}</h3>\n                <p>{bookData.description}</p>\n                <button onClick={() => saveBook(bookData)}>Save Book</button>\n            </div>\n    );\n  }\n\n\nexport default BookResults;\n","import React, { useState, useRef } from \"react\"\nimport API from \"../utils/API\";\nimport BookResult from \"./BookResult\";\n\nfunction SearchBooks() {\n  // Setting our component's initial state\n  const [bookResults, setResults] = useState([])\n\n  const searchKeyword = useRef();\n\n  // search job postings\n  function searchBooks(keyword) {\n    API.searchBooks(keyword)\n      .then(res => setResults(res))\n      .catch(err => console.log(err));\n  }\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit() {\n      searchBooks(searchKeyword.current.value);\n  }\n\n    return (\n        <div className=\"container\">\n\n            <div className=\"row\">\n              <h1>Search Google Books</h1>\n\n              <form onSubmit={() => handleFormSubmit()}>\n\n                  <input \n                    className=\"search-bar\"\n                    type=\"text\"\n                    placeholder=\"Search book title, author, etc.\"\n                    ref={searchKeyword}\n                  />\n                  <input type=\"submit\" className=\"btn btn-primary\" value=\"Search Books\"/>\n\n              </form>\n\n              <div className=\"results\">\n\n                {bookResults.map(result => \n                  <BookResult bookData={result}/>\n                )}\n\n              </div>\n                \n            </div>\n\n        </div>\n    );\n  }\n\n\nexport default SearchBooks;\n","import React, { useState, useEffect } from \"react\"\nimport API from \"../utils/API\";\n\nfunction SavedBooks() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => \n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  const savedBooksList = books.map(book => \n    <li>{book.title} <a class=\"view-btn\" href={book.link}>View</a> <button className=\"delete-btn\" onClick={() => deleteBook(book._id)}>Delete</button></li>\n  );\n\n    return (\n        <div class=\"container\">\n            <div class=\"row\">\n                <h1>Saved Books</h1>\n                <ul>\n                    {savedBooksList}\n                </ul>\n            </div>\n        </div>\n    );\n  }\n\n\nexport default SavedBooks;\n","import React from \"react\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <h1 className=\"navbar-brand\">Reading List</h1>\n\n      <ul className=\"navbar-nav mr-auto\">\n\n      <li className=\"nav-item\">\n      <a className=\"navbar-brand\" href=\"/Google-Books-Search\">\n        Search Books\n      </a>\n      </li>\n\n      <li className=\"nav-item\">\n      <a className=\"navbar-brand saved-books\" href=\"/savedbooks\"> \n        Saved Books\n      </a>\n      </li>\n\n      </ul>\n\n\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\n\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route exact path={[\"/Google-Books-Search\"]}>\n            <SearchBooks />\n          </Route>\n          <Route exact path=\"/savedbooks\">\n            <SavedBooks />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}