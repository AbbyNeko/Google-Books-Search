{"version":3,"sources":["utils/API.js","pages/BookResult.js","pages/SearchBooks.js","pages/SavedBooks.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","keywords","id","delete","bookData","post","BookResults","authorsListed","authors","map","author","index","imgLink","imageLinks","undefined","smallThumbnail","className","src","alt","title","href","infoLink","target","rel","description","onClick","console","log","JSON","stringify","API","synopsis","link","then","res","catch","err","saveBook","SearchBooks","useState","bookResults","setResults","searchKeyword","useRef","listedResults","result","BookResult","volumeInfo","key","onSubmit","event","keyword","preventDefault","current","value","data","type","placeholder","ref","SavedBooks","books","setBooks","loadBooks","useEffect","savedBooksList","book","_id","Nav","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.420a9fb8.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all books\r\n  getBooks: function() {\r\n    return axios.get(\"/api/books/\");\r\n  },\r\n  searchBooks: function(keywords) {\r\n    return axios.get(\"/api/searchBooks/\"+keywords);\r\n  },\r\n  // Deletes the book with the given id\r\n  deleteBook: function(id) {\r\n    return axios.delete(\"/api/books/\" + id);\r\n  },\r\n  // Saves a book to the database\r\n  saveBook: function(bookData) {\r\n    return axios.post(\"/api/books\", bookData);\r\n  }\r\n};\r\n","import React from \"react\"\r\nimport API from \"../utils/API\";\r\n\r\n  // When the form is submitted, use the API.saveBook method to save the book data\r\n  // Then reload books from the database\r\n  function saveBook(bookData) {\r\n\r\n    console.log(`book data - ${JSON.stringify(bookData)}`)\r\n\r\n    API.saveBook({\r\n        title: bookData.title,\r\n        author: bookData.authors[0],\r\n        synopsis: bookData.description,\r\n        link: bookData.infoLink\r\n      })\r\n        .then(res => console.log('saved'))\r\n        .catch(err => console.log(err));\r\n        \r\n  };\r\n\r\nfunction BookResults({bookData}) {\r\n\r\n  let authorsListed = '';\r\n\r\n  if(bookData.authors) {\r\n\r\n        authorsListed = bookData.authors.map((author, index) => { \r\n          if(index > 0) { \r\n              return ', '+author; \r\n          } else { \r\n              return author; \r\n          }\r\n        });\r\n\r\n  } \r\n\r\n  let imgLink = bookData.imageLinks;\r\n\r\n  if(imgLink !== undefined) {\r\n    imgLink = imgLink.smallThumbnail;\r\n  }\r\n\r\n    return (\r\n            <div className=\"result row\">\r\n\r\n              <div className=\"book-img col-2\">\r\n                  <img src={imgLink || \"https://via.placeholder.com/100x150\"} alt={bookData.title}/>\r\n              </div>\r\n\r\n              <div className=\"book-info col-9\">\r\n                  <h1><a href={bookData.infoLink} target=\"_blank\" rel=\"noopener noreferrer\">{bookData.title}</a></h1>\r\n                  <h3>Author: {authorsListed}</h3>\r\n                  <p>{bookData.description}</p>\r\n                  <button className=\"btn btn-primary\" onClick={() => saveBook(bookData)}>Save Book</button>\r\n              </div>\r\n              \r\n            </div>\r\n\r\n    );\r\n  }\r\n\r\n\r\nexport default BookResults;\r\n","import React, { useState, useRef } from \"react\"\r\nimport API from \"../utils/API\";\r\nimport BookResult from \"./BookResult\";\r\n\r\nfunction SearchBooks() {\r\n  // Setting our component's initial state\r\n  const [bookResults, setResults] = useState([])\r\n\r\n  const searchKeyword = useRef();\r\n\r\n  // search job postings\r\n  function searchBooks(keyword) {\r\n    API.searchBooks(keyword)\r\n      .then(res => setResults(res.data))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  // When the form is submitted, use the API.saveBook method to save the book data\r\n  // Then reload books from the database\r\n  function handleFormSubmit(event) {\r\n\r\n      event.preventDefault();\r\n\r\n      searchBooks(searchKeyword.current.value);\r\n  }\r\n\r\n  //console.log(`results - ${JSON.stringify(bookResults)}`);\r\n\r\n  const listedResults = bookResults.map((result, index) => \r\n    <BookResult bookData={result.volumeInfo} key={index}/>\r\n  );\r\n\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            <div className=\"row\">\r\n              <h1 className=\"title\">Search Google Books</h1>\r\n\r\n              <form onSubmit={handleFormSubmit}>\r\n\r\n                  <input \r\n                    className=\"search-bar\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search book title, author, etc.\"\r\n                    ref={searchKeyword}\r\n                  />\r\n                  <input type=\"submit\" className=\"btn btn-primary\" value=\"Search Books\"/>\r\n\r\n              </form>\r\n\r\n              <div className=\"results\">\r\n\r\n                {listedResults}\r\n\r\n              </div>\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default SearchBooks;\r\n","import React, { useState, useEffect } from \"react\"\r\nimport API from \"../utils/API\";\r\n\r\nfunction SavedBooks() {\r\n  // Setting our component's initial state\r\n  const [books, setBooks] = useState([])\r\n\r\n  // Load all books and store them with setBooks\r\n  useEffect(() => {\r\n    loadBooks()\r\n  }, [])\r\n\r\n  // Loads all books and sets them to books\r\n  function loadBooks() {\r\n    API.getBooks()\r\n      .then(res => \r\n        setBooks(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // Deletes a book from the database with a given id, then reloads books from the db\r\n  function deleteBook(id) {\r\n    API.deleteBook(id)\r\n      .then(res => loadBooks())\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  const savedBooksList = books.map((book, index) => \r\n    <li key={index}>{book.title}<a className=\"view-btn\" href={book.link} target=\"_blank\" rel=\"noopener noreferrer\">View</a> <button className=\"delete-btn btn btn-danger\" onClick={() => deleteBook(book._id)}>Delete</button></li>\r\n  );\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <h1 className=\"title\">Saved Books</h1>\r\n                </div>\r\n\r\n                <div className=\"col-12 saved-books-list\">\r\n                    <ul>\r\n                        {savedBooksList}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\nexport default SavedBooks;\r\n","import React from \"react\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n      <h1 className=\"navbar-brand\">Reading List</h1>\r\n\r\n      <ul className=\"navbar-nav mr-auto\">\r\n\r\n      <li className=\"nav-item\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Search Books\r\n      </a>\r\n      </li>\r\n\r\n      <li className=\"nav-item\">\r\n      <a className=\"navbar-brand saved-books\" href=\"/savedbooks\"> \r\n        Saved Books\r\n      </a>\r\n      </li>\r\n\r\n      </ul>\r\n\r\n\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport SavedBooks from \"./pages/SavedBooks\";\r\n\r\nimport Nav from \"./components/Nav\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Nav />\r\n        <Switch>\r\n          <Route exact path={[\"/\"]}>\r\n            <SearchBooks />\r\n          </Route>\r\n          <Route exact path=\"/savedbooks\">\r\n            <SavedBooks />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}